<def f='include/google/protobuf/stubs/stl_util.h' l='83' ll='86' type='char * google::protobuf::string_as_array(string * str)'/>
<use f='include/google/protobuf/io/zero_copy_stream_impl_lite.h' l='346' u='c' c='_ZN6google8protobuf2io19mutable_string_dataEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<doc f='include/google/protobuf/stubs/stl_util.h' l='71'>// Return a mutable char* pointing to a string&apos;s internal buffer,
// which may not be null-terminated. Writing through this pointer will
// modify the string.
//
// string_as_array(&amp;str)[i] is valid for 0 &lt;= i &lt; str.size() until the
// next call to a string method that invalidates iterators.
//
// As of 2006-04, there is no standard-blessed way of getting a
// mutable reference to a string&apos;s internal buffer. However, issue 530
// (http://www.open-std.org/JTC1/SC22/WG21/docs/lwg-active.html#530)
// proposes this as the method. According to Matt Austern, this should
// already work on all current implementations.</doc>
