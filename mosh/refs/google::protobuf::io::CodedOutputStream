<def f='include/google/protobuf/io/coded_stream.h' l='621' ll='787'/>
<size>32</size>
<doc f='include/google/protobuf/io/coded_stream.h' l='575'>// Class which encodes and writes binary data which is composed of varint-
// encoded integers and fixed-width pieces.  Wraps a ZeroCopyOutputStream.
// Most users will not need to deal with CodedOutputStream.
//
// Most methods of CodedOutputStream which return a bool return false if an
// underlying I/O error occurs.  Once such a failure occurs, the
// CodedOutputStream is broken and is no longer useful. The Write* methods do
// not return the stream status, but will invalidate the stream if an error
// occurs. The client can probe HadError() to determine the status.
//
// Note that every method of CodedOutputStream which writes some data has
// a corresponding static &quot;ToArray&quot; version. These versions write directly
// to the provided buffer, returning a pointer past the last written byte.
// They require that the buffer has sufficient capacity for the encoded data.
// This allows an optimization where we check if an output stream has enough
// space for an entire message before we start writing and, if there is, we
// call only the ToArray methods to avoid doing bound checks for each
// individual value.
// i.e., in the example above:
//
//   CodedOutputStream coded_output = new CodedOutputStream(raw_output);
//   int magic_number = 1234;
//   char text[] = &quot;Hello world!&quot;;
//
//   int coded_size = sizeof(magic_number) +
//                    CodedOutputStream::VarintSize32(strlen(text)) +
//                    strlen(text);
//
//   uint8* buffer =
//       coded_output-&gt;GetDirectBufferForNBytesAndAdvance(coded_size);
//   if (buffer != NULL) {
//     // The output stream has enough space in the buffer: write directly to
//     // the array.
//     buffer = CodedOutputStream::WriteLittleEndian32ToArray(magic_number,
//                                                            buffer);
//     buffer = CodedOutputStream::WriteVarint32ToArray(strlen(text), buffer);
//     buffer = CodedOutputStream::WriteRawToArray(text, strlen(text), buffer);
//   } else {
//     // Make bound-checked writes, which will ask the underlying stream for
//     // more space as needed.
//     coded_output-&gt;WriteLittleEndian32(magic_number);
//     coded_output-&gt;WriteVarint32(strlen(text));
//     coded_output-&gt;WriteRaw(text, strlen(text));
//   }
//
//   delete coded_output;</doc>
<fun r='_ZN6google8protobuf2io17CodedOutputStreamC1EPNS1_20ZeroCopyOutputStreamE'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStreamD1Ev'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream4SkipEi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream22GetDirectBufferPointerEPPvPi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream34GetDirectBufferForNBytesAndAdvanceEi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream8WriteRawEPKvi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream20WriteRawMaybeAliasedEPKvi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream15WriteRawToArrayEPKviPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream11WriteStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream18WriteStringToArrayERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream26WriteStringWithSizeToArrayERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream14EnableAliasingEb'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream19WriteLittleEndian32Ej'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream26WriteLittleEndian32ToArrayEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream19WriteLittleEndian64Em'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream26WriteLittleEndian64ToArrayEmPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream13WriteVarint32Ej'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream20WriteVarint32ToArrayEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream13WriteVarint64Em'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream20WriteVarint64ToArrayEmPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream25WriteVarint32SignExtendedEi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream32WriteVarint32SignExtendedToArrayEiPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream8WriteTagEj'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream15WriteTagToArrayEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream12VarintSize32Ej'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream12VarintSize64Em'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream24VarintSize32SignExtendedEi'/>
<fun r='_ZNK6google8protobuf2io17CodedOutputStream9ByteCountEv'/>
<fun r='_ZNK6google8protobuf2io17CodedOutputStream8HadErrorEv'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStreamC1ERKS2_'/>
<mbr r='google::protobuf::io::CodedOutputStream::output_' o='0' t='google::protobuf::io::ZeroCopyOutputStream *'/>
<mbr r='google::protobuf::io::CodedOutputStream::buffer_' o='64' t='uint8 *'/>
<mbr r='google::protobuf::io::CodedOutputStream::buffer_size_' o='128' t='int'/>
<mbr r='google::protobuf::io::CodedOutputStream::total_bytes_' o='160' t='int'/>
<mbr r='google::protobuf::io::CodedOutputStream::had_error_' o='192' t='bool'/>
<mbr r='google::protobuf::io::CodedOutputStream::aliasing_enabled_' o='200' t='bool'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream7AdvanceEi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream7RefreshEv'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream15WriteAliasedRawEPKvi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream28WriteVarint32FallbackToArrayEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream34WriteVarint32FallbackToArrayInlineEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream26WriteVarint64ToArrayInlineEmPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream20VarintSize32FallbackEj'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream34GetDirectBufferForNBytesAndAdvanceEi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream20WriteVarint32ToArrayEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream25WriteVarint32SignExtendedEi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream32WriteVarint32SignExtendedToArrayEiPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream26WriteLittleEndian32ToArrayEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream26WriteLittleEndian64ToArrayEmPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream8WriteTagEj'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream15WriteTagToArrayEjPh'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream12VarintSize32Ej'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream24VarintSize32SignExtendedEi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream11WriteStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream20WriteRawMaybeAliasedEPKvi'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream18WriteStringToArrayERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPh'/>
<fun r='_ZNK6google8protobuf2io17CodedOutputStream9ByteCountEv'/>
<fun r='_ZN6google8protobuf2io17CodedOutputStream7AdvanceEi'/>
